#%% UC 2.1 Einlesen der Daten

#Zuerst alle benötigten Bibliotheken importieren
import os
import numpy as np
import pandas as pd
import neurokit2 as nk
import json

# Überprüfen, ob Dateien vorhanden sind
list_of_new_tests = [] #Neues und leeres Array erstellen
folder_current = os.path.dirname(__file__) 
folder_input_data = os.path.join(folder_current, 'input_data') #joins the path "input_data"

def get_new_data():
    '''searching for ending ".csv" in "input_data"'''
    for file in os.listdir(folder_input_data):
        if file.endswith(".csv"):
            file_name = os.path.join(folder_input_data, file)
            subject_id = file_name.split(".")[0][-1]
            new_ecg_data = pd.read_csv(file_name)
            ## Erstellen einer Liste von Tests, die zu verarbeiten sind
            list_of_new_tests.append(new_ecg_data)
    return new_ecg_data

new_ecg_data = get_new_data() #Funktion definiert new_ecg_data
new_ecg_data["Subject_3"].plot() #Subject 3 kann geplottet werden

#%% UC 2.2 Vorverarbeiten der Daten

## Anlegen einer Zeitreihe der Herzfrequenz aus den EKG-Daten
ekg_data=pd.DataFrame()
ekg_data["ECG"] = new_ecg_data["Subject_3"]

# Find peaks
peaks, info = nk.ecg_peaks(ekg_data["ECG"], sampling_rate=1000)
#Herzschläge während des Tests (=400)
number_of_heartbeats = peaks["ECG_R_Peaks"].sum()
#Test dauert 3 Minuten: Datengröße von 180.000 durch sampling rate von 1000 hz durch 60 Sekunden (sonst Ergebnis für Sekunden)
duration_test_min = ekg_data.size/1000/60
#Durchschnittlicher Herzschlag: (400/3)
average_hr_test = number_of_heartbeats / duration_test_min
## Calculate heart rate moving average
peaks['average_HR_10s'] = peaks.rolling(window=10000).mean()*60*1000 #Window = über diesen Bereich wird Data immer wieder betrachtet (Also hier jeweils Zeitfenster von 10 Sekunden). Mean gibt duechschnitt
peaks['average_HR_10s'].plot() #Plottet den durchschnittlichen Puls über Bereich von 10 Sekunden
#%% UC 2.3 Analysieren der Daten auf Abbruch-Kriterium

#termination = False #defaultwert auf False
folder_input_data = os.path.join(folder_current, 'input_data')
#aus input_data wird subject_3.json gejoined
file_name = folder_input_data = os.path.join(folder_input_data, 'subject_3.json')
f = open(file_name)
# returns JSON object as a dictionary
subject_data = json.load(f)
##Vergleich der Maximalen Herzfrequenz mit Alter des Patienten
#höchster Puls von jeweiligen 10 Sekunden abschnitten (=186)
maximum_hr = peaks['average_HR_10s'].max()
subject_max_hr = 220 - (2022 - subject_data["birth_year"]) #generell wird gesagt, dass der maximale erreichbare Puls aus 220 - dem Alter berechnet wird
def abbruch():
    '''Ist der maximale Puls größer, als 90% des Sollwerts, wird abgebrochen'''    
    if maximum_hr > subject_max_hr*0.90:
        termination = True
    else:
        termination = False

termination = abbruch() #abbruch hängt von der Funktion ab
#%% UC 2.4 Erstellen einer Zusammenfassung
#Erstellen eines Arrays
summary = np.array([['Summary for Subject ' + str(subject_data["subject_id"])],
                    ['Year of birth: ' + str(subject_data["birth_year"])]])

#print(*summary, sep="\n")
print(str(summary).replace(' [', '').replace('[', '').replace(']', ''))
